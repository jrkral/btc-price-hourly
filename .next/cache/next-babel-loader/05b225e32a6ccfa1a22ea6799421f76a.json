{"ast":null,"code":"const fetch = require('node-fetch');\n\nconst cheerio = require('cheerio');\n\nconst BTC_URL = 'https://ca.investing.com/crypto/bitcoin'; // Builds request for fetching HTML and converting to a cheerio DOM object\n\nconst getDOM = async url => {\n  return fetch(url, {\n    mode: 'no-cors'\n  }).then(res => res.text()).then(html => cheerio.load(html));\n}; // Pulls required data from cheerio DOM object\n\n\nconst extractBTCData = async DOM => {\n  // Scrape data\n  const domData = [];\n  DOM('#last_last').parent().parent().children('span[dir=\"ltr\"]').each((i, elem) => {\n    domData[i] = DOM(elem).text();\n  }); // Check if no data returned\n\n  if (!domData.length) {\n    throw new Error(\"No data was returned from the web scrape: check the scraper as the site's DOM may have changed!\");\n  } // Check if any undefined values returned\n\n\n  domData.forEach(item => {\n    if (typeof item === undefined) {\n      throw new Error(\"Type 'undefined' found in web scrape: check the scraper as the site's DOM may have changed!\");\n    }\n  });\n  return {\n    price: domData[0],\n    dlrChange: domData[1],\n    percChange: domData[2]\n  };\n};\n\nconst formatBTCData = data => {\n  const fmtPrice = data.price.replace(/[^\\d.-]/g, '');\n  const fmtDlrChange = data.dlrChange.replace(/[^\\d.-]/g, '');\n  const fmtPercChange = data.percChange.replace(/[^\\d.-]/g, '');\n  return {\n    price: parseFloat(fmtPrice),\n    dlrChange: parseFloat(fmtDlrChange),\n    percChange: parseFloat(fmtPercChange)\n  };\n};\n\nconst getBTCData = async () => {\n  const btcDOM = await getDOM(BTC_URL);\n  const btcRaw = await extractBTCData(btcDOM);\n  const btcFormatted = formatBTCData(btcRaw);\n  return btcFormatted;\n};\n\nexport default getBTCData;","map":{"version":3,"sources":["/home/travis/Repos/btc-hourly-price/lib/getBTCData.js"],"names":["fetch","require","cheerio","BTC_URL","getDOM","url","mode","then","res","text","html","load","extractBTCData","DOM","domData","parent","children","each","i","elem","length","Error","forEach","item","undefined","price","dlrChange","percChange","formatBTCData","data","fmtPrice","replace","fmtDlrChange","fmtPercChange","parseFloat","getBTCData","btcDOM","btcRaw","btcFormatted"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAME,OAAO,GAAG,yCAAhB,C,CAEA;;AACA,MAAMC,MAAM,GAAG,MAAMC,GAAN,IAAa;AAC3B,SAAOL,KAAK,CAACK,GAAD,EAAM;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAN,CAAL,CACLC,IADK,CACAC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADP,EAELF,IAFK,CAEAG,IAAI,IAAIR,OAAO,CAACS,IAAR,CAAaD,IAAb,CAFR,CAAP;AAGA,CAJD,C,CAMA;;;AACA,MAAME,cAAc,GAAG,MAAMC,GAAN,IAAa;AACnC;AACA,QAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,GAAG,CAAC,YAAD,CAAH,CACEE,MADF,GAEEA,MAFF,GAGEC,QAHF,CAGW,iBAHX,EAIEC,IAJF,CAIO,CAACC,CAAD,EAAIC,IAAJ,KAAa;AAClBL,IAAAA,OAAO,CAACI,CAAD,CAAP,GAAaL,GAAG,CAACM,IAAD,CAAH,CAAUV,IAAV,EAAb;AACA,GANF,EAHmC,CAWnC;;AACA,MAAI,CAACK,OAAO,CAACM,MAAb,EAAqB;AACpB,UAAM,IAAIC,KAAJ,CACL,iGADK,CAAN;AAGA,GAhBkC,CAkBnC;;;AACAP,EAAAA,OAAO,CAACQ,OAAR,CAAgBC,IAAI,IAAI;AACvB,QAAI,OAAOA,IAAP,KAAgBC,SAApB,EAA+B;AAC9B,YAAM,IAAIH,KAAJ,CACL,6FADK,CAAN;AAGA;AACD,GAND;AAQA,SAAO;AACNI,IAAAA,KAAK,EAAEX,OAAO,CAAC,CAAD,CADR;AAENY,IAAAA,SAAS,EAAEZ,OAAO,CAAC,CAAD,CAFZ;AAGNa,IAAAA,UAAU,EAAEb,OAAO,CAAC,CAAD;AAHb,GAAP;AAKA,CAhCD;;AAkCA,MAAMc,aAAa,GAAGC,IAAI,IAAI;AAC7B,QAAMC,QAAQ,GAAGD,IAAI,CAACJ,KAAL,CAAWM,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAjB;AACA,QAAMC,YAAY,GAAGH,IAAI,CAACH,SAAL,CAAeK,OAAf,CAAuB,UAAvB,EAAmC,EAAnC,CAArB;AACA,QAAME,aAAa,GAAGJ,IAAI,CAACF,UAAL,CAAgBI,OAAhB,CAAwB,UAAxB,EAAoC,EAApC,CAAtB;AAEA,SAAO;AACNN,IAAAA,KAAK,EAAES,UAAU,CAACJ,QAAD,CADX;AAENJ,IAAAA,SAAS,EAAEQ,UAAU,CAACF,YAAD,CAFf;AAGNL,IAAAA,UAAU,EAAEO,UAAU,CAACD,aAAD;AAHhB,GAAP;AAKA,CAVD;;AAYA,MAAME,UAAU,GAAG,YAAY;AAC9B,QAAMC,MAAM,GAAG,MAAMhC,MAAM,CAACD,OAAD,CAA3B;AACA,QAAMkC,MAAM,GAAG,MAAMzB,cAAc,CAACwB,MAAD,CAAnC;AACA,QAAME,YAAY,GAAGV,aAAa,CAACS,MAAD,CAAlC;AACA,SAAOC,YAAP;AACA,CALD;;AAOA,eAAeH,UAAf","sourcesContent":["const fetch = require('node-fetch')\nconst cheerio = require('cheerio')\n\nconst BTC_URL = 'https://ca.investing.com/crypto/bitcoin'\n\n// Builds request for fetching HTML and converting to a cheerio DOM object\nconst getDOM = async url => {\n\treturn fetch(url, { mode: 'no-cors' })\n\t\t.then(res => res.text())\n\t\t.then(html => cheerio.load(html))\n}\n\n// Pulls required data from cheerio DOM object\nconst extractBTCData = async DOM => {\n\t// Scrape data\n\tconst domData = []\n\tDOM('#last_last')\n\t\t.parent()\n\t\t.parent()\n\t\t.children('span[dir=\"ltr\"]')\n\t\t.each((i, elem) => {\n\t\t\tdomData[i] = DOM(elem).text()\n\t\t})\n\n\t// Check if no data returned\n\tif (!domData.length) {\n\t\tthrow new Error(\n\t\t\t\"No data was returned from the web scrape: check the scraper as the site's DOM may have changed!\"\n\t\t)\n\t}\n\n\t// Check if any undefined values returned\n\tdomData.forEach(item => {\n\t\tif (typeof item === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Type 'undefined' found in web scrape: check the scraper as the site's DOM may have changed!\"\n\t\t\t)\n\t\t}\n\t})\n\n\treturn {\n\t\tprice: domData[0],\n\t\tdlrChange: domData[1],\n\t\tpercChange: domData[2],\n\t}\n}\n\nconst formatBTCData = data => {\n\tconst fmtPrice = data.price.replace(/[^\\d.-]/g, '')\n\tconst fmtDlrChange = data.dlrChange.replace(/[^\\d.-]/g, '')\n\tconst fmtPercChange = data.percChange.replace(/[^\\d.-]/g, '')\n\n\treturn {\n\t\tprice: parseFloat(fmtPrice),\n\t\tdlrChange: parseFloat(fmtDlrChange),\n\t\tpercChange: parseFloat(fmtPercChange),\n\t}\n}\n\nconst getBTCData = async () => {\n\tconst btcDOM = await getDOM(BTC_URL)\n\tconst btcRaw = await extractBTCData(btcDOM)\n\tconst btcFormatted = formatBTCData(btcRaw)\n\treturn btcFormatted\n}\n\nexport default getBTCData\n"]},"metadata":{},"sourceType":"module"}